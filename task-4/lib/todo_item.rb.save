require 'active_record'


class TodoItem < ActiveRecord::Base
  
  attr_accessible :title, :description, :todo_list_id, :date_due
  attr_accessor :date_due_unchecked
  belongs_to :todo_list

  validates :title, :todo_list_id, :presence => true
  validates :title, :length => {:minimum => 5, :maximum => 30}
  validates :description, :length => {:maximum => 255}
  validate :date_due_validation

  def date_due_validation
    errors.add(:date_due, 'date must be in dd/mm/yyyy format') if (date_due_unchecked =~ /[0-3][0-9]\/[0-1][0-9]\/[0-9]{2}(?:[0-9]{2})/)==nil
  end
  
  def self.find_by_list_id(list_id)
	where(:todo_list_id => list_id)
  end
  
  def self.find_by_too_long_description
	  where("LENGTH(description) > ?", 100)
  end
  
  def self.paginate(page)
    items = TodoItem.find_all_by_title
    offset = 5
    page -=1
    return items[offset*page..offset*page+(offset-1)]
  end
  
  def self.find_by_page(page)
	items = self.paginate
    return items[page]	
  end

  def self.find_by_user(user)  
    items ||= []
    TodoList.find_by_user(user).each do |list|
      self.find_by_list_id(list.id).each do |item|
        items << item
      end 
    end
    return items
  end
  
  def self.find_all_by_title
    find(:all, :order => "title ASC")
  end
  
  def self.find_by_word_in_description(word)
    searched_word = "%\s" + "#{word.downcase}" + "\s%"
    where("LOWER(description) LIKE ?", searched_word)
  end

  def self.find_by_user_and_date_due(user, date_due)
    self.find_by_user(user) & self.find_by_date_due(date_due)
  end

  def self.find_by_date_due(date_due)
    where("date_due == ?", date_due)
  end

  def self.find_by_due_year_and_month(year,month)
    where("date_due BETWEEN ? AND ?", Time.new(year, month), Time.new(year, month).end_of_month)
  end

  def self.find_overdue
    where("date_due < ?", Time.now)
  end
end

